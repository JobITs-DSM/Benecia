plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'jacoco'
}

group = 'com.jobits.dsm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // db connectors
    testImplementation 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // jjwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // aws
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa'

    // configuration
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'it.ozimov:embedded-redis:0.7.2'
}

test {
    useJUnitPlatform()

    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(true)
    }
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
compileQuerydsl.doFirst {
    if(file(querydslDir).exists())
        delete(file(querydslDir))
}

tasks.jar {
    enabled = false
}